// 제일 위에있는 부모노드를 루트 노드라합니다.
// 그리고 아래로 뻗어나가는 선들을 간선 또는 엣지라고 부릅니다.
// 그리고 깊이우선탐색을 시작하면 대부분 루트노드기준 왼쪽으로 파고들어 탐색을 시작합니다.

function solution(v) {
  let answer = "";

  function dfs(v) {
    // 재귀함수를 사용할때 모르겠으면 일단 if else를 적어놓습니다.
    if (v > 7) return;
    // 그 후에 else문을 작성하고 else문에는 대충 가지가 뻗는다 즉, 함수를 재귀적으로 호출한다고 생각합니다.
    else {
      // 루트노드가 1이라는 가정하에 왼쪽 자식으로 뻗으려면
      // 루트노드 * 2를 하게 되면 왼쪽자식으로 가게되고
      // 이어서 +1을 해주면 오른쪽 자식으로 가게됩니다.
      // 아래와 같이 작성을하면 전위순회가 됩니다.
      // 제일먼저 루트노드인 v를 출력하고 그 뒤 왼쪽자식, 오른쪽자식순으로 탐색을 하기때문에 전위순회가 되는것입니다.
      // 그렇다면 여기서 중위순회를 하고싶다면 console.log를 중간에 놓아주면 왼쪽자식, 부모, 오른쪽자식 순으로 순회를 하게됩니다.

      // 순서 - 먼저 dfs(1)이 호출되며 이 dfs(1)은 호출스택에 가장먼저 쌓이게 됩니다. 그렇게 쌓이면서 스택 프레임을 저장합니다
      // 이떄 dfs(1)의 스택프레임에는 v의 정보, 복귀주소등 정보가 담기게 되고 dfs(v * 2)를 만나면서 재귀적으로 함수를 호출하게 됩니다.
      // 이떄 dfs(1)은 dfs(v * 2)를 호출하는 것까지 자기의 할 일을 끝냈기 떄문에 가령 dfs(v * 2)가 18번째 줄에 있었다면 일단 18번째 줄까지 일을했다고
      // 기록을 하게됩니다.
      // 그 뒤 다른 스택들도 동일한 방법으로 쌓아나가다가 v > 7인 조건을 만나 return을 하게 되면 해당 스택이 pop되어 사라지고
      // 이전 호출스택으로 돌아가게 됩니다. 그렇게 이전호출 스택으로 돌아가게 되면 그 스택 프레임에는 내가 몇번째줄까지 일을했는지에 대한 정보가
      // 담겨 있기 때문에 그 다음줄을 실행하게 되는것입니다.
      dfs(v * 2);
      console.log(v);
      dfs(v * 2 + 1);
    }
  }

  dfs(v);
  return answer;
}

console.log(solution(1));
