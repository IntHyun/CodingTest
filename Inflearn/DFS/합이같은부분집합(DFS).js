// N개의 원소로 구성된 자연수 집합이 주어지면, 이 집합을 두 개의 부분집합으로 나누었을 때
// 두 부분집합의 원소의 합이 서로 같은 경우가 존재하면 “YES"를 출력하고, 그렇지 않으면
// ”NO"를 출력하는 프로그램을 작성하세요.

// 둘로 나뉘는 두 부분집합은 서로소 집합(Disjoint Set)이며, 두 부분집합을 합하면 입력으로 주
// 어진 원래의 집합이 되어야 합니다.
// 예를 들어 {1, 3, 5, 6, 7, 10}이 입력되면 {1, 3, 5, 7} = {6, 10} 으로 두 부분집합의 합이
// 16으로 같은 경우가 존재하는 것을 알 수 있다.

// ▣ 입력설명
// 첫 번째 줄에 자연수 N(1<=N<=10)이 주어집니다.
// 두 번째 줄에 집합의 원소 N개가 주어진다. 각 원소는 중복되지 않으며, 그 크기는 1,000,000
// 이하입니다.

// ▣ 출력설명
// 첫 번째 줄에 “YES" 또는 ”NO"를 출력한다.

// ▣ 입력예제 1
// 6
// 1 3 5 6 7 10

// ▣ 출력예제 1
// YES

function solution(arr) {
  let answer = "NO";
  // flag를 0으로 설정해준뒤
  // 답이 발견되었을때 더이상 반복이나 재귀를돌지않게
  // 리턴을 해주도록합니다.
  // 그래야 스택에 남아있던 애들이 계속해서 돌지않고 바로 리턴해줄 수 있기 때문입니다.
  let flag = 0;
  let total = arr.reduce((a, b) => a + b, 0);
  let n = arr.length;

  function dfs(v, sum) {
    if (v === n) {
      if (flag === 1) return;
      // 전체 합에서 누적합을 빼면 반대편 원소의 합이됩니다.
      // 따라서 이 두경우가 같다면 두 부분집합의 합은 같다고 볼 수 있습니다.
      if (total - sum === sum) {
        answer = "YES";
        // 답이 발견되었다면 flag를 1로바꾸어주어 다음 재귀에서 리턴할 수 있도록 만들어줍니다.
        flag = 1;
      }
    } else {
      dfs(v + 1, sum + arr[v]);
      dfs(v + 1, sum);
    }
  }

  dfs(0, 0);

  return answer;
}

let arr = [1, 3, 5, 6, 7, 10];
console.log(solution(arr));
